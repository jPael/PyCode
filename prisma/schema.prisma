// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // sessions      Session[]
  // // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Class       Class[]
  Posts       Posts[]
  UserOnClass UserOnClass[]
}

model Class {
  id      String @id @default(cuid())
  name    String
  section String
  subject String
  room    String
  code    String @unique

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  posts       Posts[]
  UserOnClass UserOnClass[]
}

model UserOnClass {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  class   Class  @relation(fields: [classId], references: [id])
  classId String

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, classId])
}

enum PostType {
  ACTIVITY
  ANNOUNCEMENT
}

model Posts {
  id           String   @id @default(cuid())
  title        String
  instructions String
  points       Int
  due          DateTime
  type         PostType

  classId  String
  class    Class  @relation(fields: [classId], references: [id])
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
